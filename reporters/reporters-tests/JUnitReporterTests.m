
#import <SenTestingKit/SenTestingKit.h>

#import "JUnitReporter.h"
#import "Reporter+Testing.h"

@interface JUnitReporterTests : SenTestCase
@end

@implementation JUnitReporterTests

- (void)testTestResults {
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
  NSError *error = nil;
  
  // The actual XML file generated by outputDataWithEventsFromFile:
  NSData *outputData =
    [JUnitReporter outputDataWithEventsFromFile:TEST_DATA @"JSONStreamReporter-runtests.txt"];
  NSXMLDocument *resultingXML = [[[NSXMLDocument alloc] initWithData:outputData options:0 error:&error] autorelease];
  if (error) {
    STFail(@"Error parsing the actual JUnit reporter output XML:\n%@", error);
    [pool drain];
    return;
  }

  // The expected XML that should be generated by outputDataWithEventsFromFile:
  NSString *expectedFilePath = TEST_DATA @"JSONStreamReporter-expected.xml";
  NSXMLDocument *expectedXML = [[[NSXMLDocument alloc] initWithData:[NSData dataWithContentsOfFile:expectedFilePath] options:0 error:&error] autorelease];
  if (error) {
    STFail(@"Error opening file %@ the expected XML for this unit test:\n%@", expectedFilePath, error);
    [pool drain];
    return;
  }

  // The XMLs need to be massaged for a proper semantic equality check.
  for (NSXMLDocument *doc in @[expectedXML, resultingXML]) {

    // Remove the "time" attribute values, and "timestamp" attribute values.
    for (NSString *attributeName in @[@"time", @"timestamp"]) {
      NSString *xpath = [NSString stringWithFormat:@"//*[@%@]", attributeName];
      NSArray *elementsWithTimeAttr = [doc nodesForXPath:xpath error:&error];
      if (error) {
        STFail(@"Error while searching for time-related nodes using XPath.");
        [pool drain];
        return;
      }
      for (NSXMLElement *element in elementsWithTimeAttr) {
        [element removeAttributeForName:attributeName];
        [element addAttribute:[NSXMLNode attributeWithName:attributeName stringValue:@""]];
      }
    }
    
    // Trim leading & trailing whitespace in each line of the inside of <system-out> tags
    NSArray *systemOutElements = [doc nodesForXPath:@"//system-out" error:&error];
    if (error) {
      STFail(@"Error while searching for <system-out> nodes using Xpath.");
      [pool drain];
      return;
    }
    for (NSXMLElement *systemOutElement in systemOutElements) {
      STAssertEquals([systemOutElement childCount], (NSUInteger) 1, @"A <system-out> tag has %d children, but should have 1. Element in question: %@", [systemOutElement childCount], systemOutElement);
      NSXMLNode *innerText = [systemOutElement childAtIndex:0];
      STAssertEquals([innerText kind], NSXMLTextKind, @"The <system-out> tag child should be a text node.");
      NSArray *lines = [[innerText stringValue] componentsSeparatedByString:@"\n"];
      NSMutableArray *trimmedLines = [[NSMutableArray alloc] init];
      for (NSString *line in lines) {
        NSString *trimmed = line;
        
        // Trim the end, then the beginning.
        for (NSString *trimRegexPattern in @[@"^\\s*", @"\\s*$"]) {
          NSRange range = [trimmed rangeOfString:trimRegexPattern options:NSRegularExpressionSearch];
          if (range.location != NSNotFound)
            trimmed = [trimmed stringByReplacingCharactersInRange:range withString:@""];
        }
        if (![trimmed isEqualToString:@""])
          [trimmedLines addObject:trimmed];
      }
      NSXMLNode *trimmedInnerText = [[NSXMLNode alloc] initWithKind:NSXMLTextKind];
      [trimmedInnerText setStringValue:[trimmedLines componentsJoinedByString:@"\n"]];
      [systemOutElement replaceChildAtIndex:0 withNode:trimmedInnerText];
      [trimmedInnerText release];
      [trimmedLines release];
    }
    
  }
  
  // When this assertion fails, figuring out which part of the XML is different is a bitch.
  // If we can find a good xml treediff of some sort, the failure output would be much more readable.
  STAssertEqualObjects(expectedXML, resultingXML, @"The XML doc generated by the JUnit Reporter differs from the one expected by this test.");
  [pool drain];
}

@end